// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZBAppRouterFrameworkSC
import Swift
import SwiftUI
@_exported import ZBAppRouterFrameworkSC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor public struct AlertData : Swift.Identifiable, Swift.Sendable {
  @_Concurrency.MainActor public let id: Foundation.UUID
  @_Concurrency.MainActor public let title: Swift.String
  @_Concurrency.MainActor public let message: Swift.String?
  @_Concurrency.MainActor public let primaryButton: SwiftUI.Alert.Button
  @_Concurrency.MainActor public let secondaryButton: SwiftUI.Alert.Button?
  @_Concurrency.MainActor public init(title: Swift.String, message: Swift.String? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button? = nil)
  public typealias ID = Foundation.UUID
}

@_Concurrency.MainActor public struct SheetData : Swift.Identifiable, Swift.Sendable {
  @_Concurrency.MainActor public let id: Foundation.UUID
  @_Concurrency.MainActor public let content: @Sendable () -> SwiftUICore.AnyView
  @_Concurrency.MainActor public let isFullScreen: Swift.Bool
  @_Concurrency.MainActor public init(@SwiftUICore.ViewBuilder content: @escaping @Sendable () -> some View, isFullScreen: Swift.Bool = false)
  public typealias ID = Foundation.UUID
}
public struct ToastViewData : Swift.Identifiable {
  public let id: Foundation.UUID
  public let message: Swift.String
  public let expandedMessage: Swift.String?
  public let duration: Swift.Double
  public init(message: Swift.String, expandedMessage: Swift.String? = nil, duration: Swift.Double = 3.0)
  public typealias ID = Foundation.UUID
}
@_Concurrency.MainActor @preconcurrency public struct ToastView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s22ZBAppRouterFrameworkSC9ToastViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct ZBNavigateEnvironmentKey : @preconcurrency SwiftUICore.EnvironmentKey {
  @_Concurrency.MainActor public static var defaultValue: ZBAppRouterFrameworkSC.ZBNavigationAction
  public typealias Value = ZBAppRouterFrameworkSC.ZBNavigationAction
}
extension SwiftUICore.EnvironmentValues {
  @_Concurrency.MainActor public var navigate: ZBAppRouterFrameworkSC.ZBNavigationAction {
    get
    set
  }
}
@_Concurrency.MainActor public struct ZBNavigationAction {
  public enum ZBNavigationType : Swift.Sendable {
    case to(ZBAppRouterFrameworkSC.ZBRoute)
    case back(result: (any Swift.Sendable)?)
    case off(ZBAppRouterFrameworkSC.ZBRoute)
    case offAll(ZBAppRouterFrameworkSC.ZBRoute)
    case offAllToRoot
    case offUntil(ZBAppRouterFrameworkSC.ZBRoute, @Sendable (ZBAppRouterFrameworkSC.ZBRoute) -> Swift.Bool)
    case until(@Sendable (ZBAppRouterFrameworkSC.ZBRoute) -> Swift.Bool)
    case toWithResult(ZBAppRouterFrameworkSC.ZBRoute, completion: @Sendable (Any?) -> Swift.Void)
    case snackbar(Swift.String, expandedMessage: Swift.String?, duration: Swift.Double)
    case alert(Swift.String, message: Swift.String?, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button?)
    case sheet(ZBAppRouterFrameworkSC.SheetData, isFullScreen: Swift.Bool)
    case sheetDismiss
  }
  @_Concurrency.MainActor public init(action: @escaping @_Concurrency.MainActor (ZBAppRouterFrameworkSC.ZBNavigationAction.ZBNavigationType) -> Swift.Void)
  @_Concurrency.MainActor public func to(_ route: ZBAppRouterFrameworkSC.ZBRoute)
  @_Concurrency.MainActor public func back(result: (any Swift.Sendable)? = nil)
  @_Concurrency.MainActor public func off(_ route: ZBAppRouterFrameworkSC.ZBRoute)
  @_Concurrency.MainActor public func offAll(_ route: ZBAppRouterFrameworkSC.ZBRoute)
  @_Concurrency.MainActor public func offAllToRoot()
  @_Concurrency.MainActor public func offUntil(_ route: ZBAppRouterFrameworkSC.ZBRoute, until predicate: @escaping @Sendable (ZBAppRouterFrameworkSC.ZBRoute) -> Swift.Bool)
  @_Concurrency.MainActor public func until(_ predicate: @escaping @Sendable (ZBAppRouterFrameworkSC.ZBRoute) -> Swift.Bool)
  @_Concurrency.MainActor public func toWithResult(_ route: ZBAppRouterFrameworkSC.ZBRoute, completion: @escaping @Sendable (Any?) -> Swift.Void)
  @_Concurrency.MainActor public func snackbar(_ message: Swift.String, expandedMessage: Swift.String? = nil, duration: Swift.Double = 3.0)
  @_Concurrency.MainActor public func alert(title: Swift.String, message: Swift.String? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button? = nil)
  @_Concurrency.MainActor public func sheet<Content>(@SwiftUICore.ViewBuilder content: @escaping @Sendable () -> Content, isFullScreen: Swift.Bool = false) where Content : SwiftUICore.View
  @_Concurrency.MainActor public func sheetDismiss()
}
@_Concurrency.MainActor public struct ZBNavigationHandler<T> where T : ZBAppRouterFrameworkSC.ZBRoutable {
  @_Concurrency.MainActor public static func handleNavigation(_ navigationType: ZBAppRouterFrameworkSC.ZBNavigationAction.ZBNavigationType, routes: inout [T], resultHandler: inout (@Sendable (Any?) -> Swift.Void)?, snackbarQueue: inout [ZBAppRouterFrameworkSC.ToastViewData], alertData: inout ZBAppRouterFrameworkSC.AlertData?, sheetData: inout ZBAppRouterFrameworkSC.SheetData?)
}
@_Concurrency.MainActor public struct ZBNavigationStackView<RouteType, Content> : SwiftUICore.View where RouteType : ZBAppRouterFrameworkSC.ZBRoutable, Content : SwiftUICore.View {
  @_Concurrency.MainActor public init(@SwiftUICore.ViewBuilder rootView: () -> Content, @SwiftUICore.ViewBuilder destinationBuilder: @escaping (RouteType) -> any SwiftUICore.View)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s22ZBAppRouterFrameworkSC21ZBNavigationStackViewV4bodyQrvp", 0) __<RouteType, Content>
}
public protocol ZBRoutable : Swift.Hashable, Swift.Sendable {
  var asRoute: ZBAppRouterFrameworkSC.ZBRoute { get }
}
public enum ZBRoute : Swift.Hashable, Swift.Sendable {
  case custom(ZBAppRouterFrameworkSC.ZBAnyRoutable)
  public init<T>(_ routable: T) where T : ZBAppRouterFrameworkSC.ZBRoutable
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ZBAppRouterFrameworkSC.ZBRoute, b: ZBAppRouterFrameworkSC.ZBRoute) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ZBAnyRoutable : Swift.Hashable, Swift.Sendable {
  public init<T>(_ routable: T) where T : ZBAppRouterFrameworkSC.ZBRoutable
  public func unwrap<T>(as type: T.Type) -> T? where T : ZBAppRouterFrameworkSC.ZBRoutable
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: ZBAppRouterFrameworkSC.ZBAnyRoutable, rhs: ZBAppRouterFrameworkSC.ZBAnyRoutable) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ZBAppRouterFrameworkSC.ToastView : Swift.Sendable {}
extension ZBAppRouterFrameworkSC.ZBNavigateEnvironmentKey : Swift.Sendable {}
extension ZBAppRouterFrameworkSC.ZBNavigationAction : Swift.Sendable {}
extension ZBAppRouterFrameworkSC.ZBNavigationHandler : Swift.Sendable {}
extension ZBAppRouterFrameworkSC.ZBNavigationStackView : Swift.Sendable {}
